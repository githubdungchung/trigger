var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { useEffect, useRef, useState } from 'react';
import { flushSync } from 'react-dom';
import './style.css';
var isBrowser = typeof window !== 'undefined';
export var useModeAnimation = function (props) {
    var _a = props || {}, _b = _a.duration, duration = _b === void 0 ? 750 : _b, _c = _a.easing, easing = _c === void 0 ? 'ease-in-out' : _c, _d = _a.pseudoElement, pseudoElement = _d === void 0 ? '::view-transition-new(root)' : _d, _e = _a.globalClassName, globalClassName = _e === void 0 ? 'dark' : _e;
    var _f = useState(isBrowser ? localStorage.getItem('theme') === 'dark' : false), isDarkMode = _f[0], setIsDarkMode = _f[1];
    var ref = useRef(null);
    var toggleSwitchTheme = function () { return __awaiter(void 0, void 0, void 0, function () {
        var _a, top, left, width, height, x, y, right, bottom, maxRadius;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!ref.current ||
                        !document.startViewTransition ||
                        window.matchMedia('(prefers-reduced-motion: reduce)').matches) {
                        setIsDarkMode(function (isDarkMode) { return !isDarkMode; });
                        return [2 /*return*/];
                    }
                    return [4 /*yield*/, document.startViewTransition(function () {
                            flushSync(function () {
                                setIsDarkMode(function (isDarkMode) { return !isDarkMode; });
                            });
                        }).ready];
                case 1:
                    _b.sent();
                    _a = ref.current.getBoundingClientRect(), top = _a.top, left = _a.left, width = _a.width, height = _a.height;
                    x = left + width / 2;
                    y = top + height / 2;
                    right = window.innerWidth - left;
                    bottom = window.innerHeight - top;
                    maxRadius = Math.hypot(Math.max(left, right), Math.max(top, bottom));
                    document.documentElement.animate({
                        clipPath: ["circle(0px at ".concat(x, "px ").concat(y, "px)"), "circle(".concat(maxRadius, "px at ").concat(x, "px ").concat(y, "px)")],
                    }, {
                        duration: duration,
                        easing: easing,
                        pseudoElement: pseudoElement,
                    });
                    return [2 /*return*/];
            }
        });
    }); };
    useEffect(function () {
        if (isDarkMode) {
            document.documentElement.classList.add(globalClassName);
            localStorage.theme = 'dark';
        }
        else {
            document.documentElement.classList.remove(globalClassName);
            localStorage.theme = 'light';
        }
    }, [isDarkMode]);
    return {
        ref: ref,
        toggleSwitchTheme: toggleSwitchTheme,
        isDarkMode: isDarkMode,
    };
};
